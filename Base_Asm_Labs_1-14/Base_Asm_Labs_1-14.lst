Microsoft (R) Macro Assembler (x64) Version 14.41.34120.0   10/02/24 10:02:39
Asm_Tools.asm						     Page 1 - 1


 00000000			.code
				;-------------------------------------------------------------------------------------------------------------
				;#region Make_Sum
 00000000			Make_Sum proc
				; int Make_Sum(int one_value, int another_value)
				; Параметры:
				; RCX - one_value
				; RDX - another_value
				; Возврат: RAX

 00000000  8B C1			mov eax, ecx
 00000002  03 C2			add eax, edx

 00000004  C3				ret

 00000005			Make_Sum endp
				;#endregion
				;-------------------------------------------------------------------------------------------------------------
				;#region Get_Pos_Address
 00000005			Get_Pos_Address proc
				; Параметры:
				; RCX - screen_buffer
				; RDX - pos & len
				; Возврат: RDI

									; 1. Вычисляем адрес вывода						
									; address_offset = (pos.Y_Pos * pos.Screen_Width + pos.X_Pos) * 4 
										; 1.1 Вычисляем pos.Y_Pos * pos.Screen_Width
 00000005  48/ 8B C2			mov rax, rdx
 00000008  48/ C1 E8 10			shr rax, 16				; shift right AX = pos.Y_Pos
 0000000C  48/ 0F B7 C0			movzx rax, ax			; RAX = AX = pos.Y_Pos обнуление не нужнух байтов

 00000010  48/ 8B DA			mov rbx, rdx
 00000013  48/ C1 EB 20			shr rbx, 32				; BX = pos.Screen_Wight
 00000017  48/ 0F B7 DB			movzx rbx, bx			; RBX = BX = pos.Screen_Width расширяем bx до rbx обнуление не нужнух байтов

 0000001B  48/ 0F AF C3			imul rax, rbx			; RAX = RAX * RBX = pos.Y_Pos * pos.Screen_Width

										; 1.2 Доавим pos.X_Pos к RAX
 0000001F  48/ 0F B7 DA			movzx rbx, dx			; RBX = DX = pos.X_Pos расширяем dx до rdx
 00000023  48/ 03 C3			add rax, rbx			; RAX = pos.Y_Pos * pos.Screen_Width + pos.X_Pos = смещения в символах

 00000026  48/ C1 E0 02			shl rax, 2				; RAX = RAX * 4 Умножение на 4 тк символ = 4 байта

 0000002A  48/ 8B F9			mov rdi, rcx			; RDI = screen_buffer
 0000002D  48/ 03 F8			add rdi, rax			; RDI = screen_buffer + address_offset
					
 00000030  C3				ret

 00000031			Get_Pos_Address endp
				;#endregion
				;-------------------------------------------------------------------------------------------------------------
				;#region Draw_Start_Symbol
 00000031			Draw_Start_Symbol proc
				; Получаем стартовый символ и атрибуты, и выводим его
				; Параметры:
				; RDI - текущий адрес в буфере окна
				; R8 - symbol
				; Возврат: None

 00000031  50				push rax
 00000032  53				push rbx

 00000033  41/ 8B C0			mov eax, r8d
 00000036  49/ 8B D8			mov rbx, r8
 00000039  48/ C1 EB 20			shr rbx, 32					; RBX = EBX = { symbol.Start_Symbol, symbol.End_Symbol}
 0000003D  66| 8B C3			mov ax, bx					; EAX = { symbol.Attribytes, symbol.Start_Symbol}
					
 00000040  AB				stosd						; Вывод стартового символа

 00000041  5B				pop rbx
 00000042  58				pop rax

 00000043  C3				ret

 00000044			Draw_Start_Symbol endp
				;#endregion
				;-------------------------------------------------------------------------------------------------------------
				;#region Draw_End_Symbol
 00000044			Draw_End_Symbol proc
				; Получаем конечный символ и атрибуты, и выводим его
				; Параметры:
				; EAX = { symbol.Attribytes, symbol.Main_Symbol}
				; RDI - текущий адрес в буфере окна
				; R8 - symbol
				; Возврат: None
					
 00000044  50				push rax
 00000045  53				push rbx

 00000046  41/ 8B C0			mov eax, r8d
 00000049  49/ 8B D8			mov rbx, r8
 0000004C  48/ C1 EB 30			shr rbx, 48					; RBX = BX = symbol.End_Symbol
 00000050  66| 8B C3			mov ax, bx					; EAX = { symbol.Attribytes, symbol.End_Symbol}
					
 00000053  AB				stosd						; Вывод конечного символа символа
					
 00000054  5B				pop rbx
 00000055  58				pop rax

 00000056  C3				ret

 00000057			Draw_End_Symbol endp
				;#endregion
				;-------------------------------------------------------------------------------------------------------------
				;#region Get_Screen_Width_Size
 00000057			Get_Screen_Width_Size proc
				; Вычисление ширину экрана в байтах
				; RDX - Spos pos или SArea_Pos area_pos
				; Возврата: R11 = pos.Screen_Width * 4

 00000057  4C/ 8B DA			mov r11, rdx
 0000005A  49/ C1 EB 20			shr r11, 32				; R11 = Pos
 0000005E  4D/ 0F B7 DB			movzx r11, r11w			; R11 = R11W = pos.Screen_Width
 00000062  49/ C1 E3 02			shl r11, 2				; умножаем на 4 R11 * 4

 00000066  C3				ret

 00000067			Get_Screen_Width_Size endp
				;#endregion
				;-------------------------------------------------------------------------------------------------------------
				;#region Draw_Line_Horizontal
 00000067			Draw_Line_Horizontal proc
				; extern "C" void Draw_Line_Horizontal(CHAR_INFO *screen_buffer, SPos pos,  ASymbol symbol);
				; Параметры:
				; RCX - screen_buffer
				; RDX - pos & len
				; R8 - symbol
				; R9 - -
				; Возврат: none

					

 00000067  50				push rax					; временое хранение регисторов которые мы хотим изменить
 00000068  53				push rbx
 00000069  51				push rcx
 0000006A  57				push rdi

											; 1. Вычисляем адрес вывода
 0000006B  E8 FFFFFF95			call Get_Pos_Address		; RDI = позиция символа в буфере screen_buffer в позиции pos

 00000070  E8 FFFFFFBC			call Draw_Start_symbol	; 2. Получаем стартовый символ и атрибуты, и выводим его

											; 3. Выводим главные символы symbol.Main_Symbol
 00000075  41/ 8B C0			mov eax, r8d				; подготовили значение которе надо записать
 00000078  48/ 8B CA			mov rcx, rdx 
 0000007B  48/ C1 E9 30			shr rcx, 48					; RCX = CX = pos.Len

 0000007F  F3/ AB			rep stosd					; STOre String Dword

 00000081  E8 FFFFFFBE			call Draw_End_Symbol	; 4. Получаем конечный символ и атрибуты, и выводим его

 00000086  5F				pop rdi
 00000087  59				pop rcx
 00000088  5B				pop rbx
 00000089  58				pop rax

 0000008A  C3				ret

 0000008B			Draw_Line_Horizontal endp
				;#endregion
				;-------------------------------------------------------------------------------------------------------------
				;#region Draw_Line_Vertical
 0000008B			Draw_Line_Vertical proc
				; extern "C" void Draw_Line_Vertical(CHAR_INFO *screen_buffer, SPos pos,  ASymbol symbol);
				; Параметры:
				; RCX - screen_buffer
				; RDX - pos & len
				; R8 - symbol
				; R9 - -
				; Возврат: none

 0000008B  50				push rax	
 0000008C  51				push rcx	
 0000008D  57				push rdi	
 0000008E  41/ 53			push r11	

											; 1. Вычисляем адрес вывода
 00000090  E8 FFFFFF70			call Get_Pos_Address		; RDI = позиция символа в буфере screen_buffer в позиции pos

											; 2. Вычисление коррекции позиции вывода
 00000095  4C/ 8B DA			mov r11, rdx
 00000098  49/ C1 EB 20			shr r11, 32					; R11 = Pos
 0000009C  4D/ 0F B7 DB			movzx r11, r11w				; R11 = R11W = pos.Screen_Width
 000000A0  49/ FF CB			dec r11
 000000A3  49/ C1 E3 02			shl r11, 2					; умножаем на 4 R11 * 4

 000000A7  E8 FFFFFF85			call Draw_Start_symbol	; 3. Получаем стартовый символ и атрибуты, и выводим его

 000000AC  49/ 03 FB			add rdi, r11				; Прибавляем коррекцию

 000000AF  48/ 8B CA			mov rcx, rdx			; 4. Подготовка к циклу
 000000B2  48/ C1 E9 30			shr rcx, 48					; RCX = CX = pos.Len

 000000B6  41/ 8B C0			mov eax, r8d				; EAX = symbol

 000000B9				_vertical:					; вывод символа 
 000000B9  AB					stosd
 000000BA  49/ 03 FB				add rdi, r11			; Перенос строки на следующий
 000000BD  E2 FA			loop _vertical

											
 000000BF  E8 FFFFFF80			call Draw_End_Symbol	; 5. Получаем конечный символ и атрибуты, и выводим его

 000000C4  41/ 5B			pop r11
 000000C6  5F				pop rdi
 000000C7  59				pop rcx
 000000C8  58				pop rax

 000000C9  C3				ret

 000000CA			Draw_Line_Vertical endp
				;#endregion
				;-------------------------------------------------------------------------------------------------------------
				;#region Show_Colors
 000000CA			Show_Colors proc
				; extern "C" void Show_Colors(CHAR_INFO* screen_buffer, SPos pos, CHAR_INFO symbol);
				; Параметры:
				; RCX - screen_buffer
				; RDX - pos & len
				; R8 - symbol
				; R9 - -
				; Возврат: none

 000000CA  50				push rax
 000000CB  53				push rbx
 000000CC  51				push rcx
 000000CD  57				push rdi
 000000CE  41/ 52			push r10
 000000D0  41/ 53			push r11

												; 1. Вычисляем адрес вывода
 000000D2  E8 FFFFFF2E			call Get_Pos_Address			; RDI = позиция символа в буфере screen_buffer в позиции pos
													
					
 000000D7  4C/ 8B D7			mov r10, rdi					; Сохраняем копию адреса

										
 000000DA  E8 FFFFFF78			call Get_Screen_Width_Size	; 2. Вычисление коррекции позиции вывода
													; R11 = pos.Screen_Width * 4 = Ширина экрана в байтах
					
												; 3. Готовим циклы
 000000DF  49/ 8B C0			mov rax, r8						; RAX = EAX = symbol

 000000E2  48/ 25			and rax, 0ffffh					; обнуляем левые 6 байфт RAX
	   0000FFFF
													; значение чисел начинаются с цифры = 0 00 00 00 00 00 00 ff ff ff

 000000E8  48/ C7 C3			mov rbx, 16						; внешний счетчик
	   00000010
					; mov rcx, 0					; медленное обнуление
 000000EF  48/ 33 C9			xor rcx, rcx					; RCX = 0 быстрое обнуление
 000000F2				_external_rainbow:

 000000F2  B1 10				mov cl, 16					; внутрений счетчик
 000000F4					_internal_rainbow:

 000000F4  AB						stosd
 000000F5  48/ 05					add rax, 010000h		; Шаг атрибута на 16 разрядов, для изменения цвета
	   00010000

 000000FB  E2 F7				loop _internal_rainbow

 000000FD  4D/ 03 D3				add r10, r11
 00000100  49/ 8B FA				mov rdi, r10

 00000103  48/ FF CB				dec rbx
 00000106  75 EA			jnz _external_rainbow

 00000108  41/ 5B			pop r11
 0000010A  41/ 5A			pop r10
 0000010C  5F				pop rdi
 0000010D  59				pop rcx
 0000010E  5B				pop rbx
 0000010F  58				pop rax

 00000110  C3				ret

 00000111			Show_Colors endp
				;#endregion
				;-------------------------------------------------------------------------------------------------------------
				;#region Clear_Area
 00000111			Clear_Area proc
				; extern "C" void Clear_Area(CHAR_INFO* screen_buffer, SArea_Pos area_pos, ASymbol symbol);
				; Параметры:
				; RCX - screen_buffer
				; RDX - area_pos
				; R8 - symbol
				; R9 - -
				; Возврат: None

 00000111  50				push rax
 00000112  53				push rbx
 00000113  51				push rcx
 00000114  57				push rdi
 00000115  41/ 52			push r10
 00000117  41/ 53			push r11

										; 1. Вычисляем адрес вывода
 00000119  E8 FFFFFEE7			call Get_Pos_Address	; RDI = позиция символа в буфере screen_buffer в позиции pos
					
 0000011E  4C/ 8B D7			mov r10, rdi			; Сохраняем копию адреса

 00000121  E8 FFFFFF31			call Get_Screen_Width_Size	; 2. Вычисление коррекции позиции вывода
													; R11 = pos.Screen_Width * 4 = Ширина экрана в байтах
					
										; 3. Готовим циклы
 00000126  49/ 8B C0			mov rax, r8			; RAX = R8D = symbol

 00000129  48/ 8B DA			mov rbx, rdx
 0000012C  48/ C1 EB 30			shr rbx, 48				; BH = area_pos.Height, BL = area_pos.Width

					; mov rcx, 0			; медленное обнуление
 00000130  48/ 33 C9			xor rcx, rcx			; RCX = 0 быстрое обнуление
 00000133				_loop_fill:

 00000133  8A CB				mov cl, bl			; внутрений счетчик
 00000135  F3/ AB				rep stosd

 00000137  4D/ 03 D3				add r10, r11
 0000013A  49/ 8B FA				mov rdi, r10

 0000013D  FE CF				dec bh
 0000013F  75 F2			jnz _loop_fill

 00000141  41/ 5B			pop r11
 00000143  41/ 5A			pop r10
 00000145  5F				pop rdi
 00000146  59				pop rcx
 00000147  5B				pop rbx
 00000148  58				pop rax

 00000149  C3				ret

 0000014A			Clear_Area endp
				;#endregion
				;-------------------------------------------------------------------------------------------------------------
				end
Microsoft (R) Macro Assembler (x64) Version 14.41.34120.0   10/02/24 10:02:39
Asm_Tools.asm						     Symbols 2 - 1




Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

Clear_Area . . . . . . . . . . .	P 	 00000111 _TEXT	Length= 00000039 Public
  _loop_fill . . . . . . . . . .	L 	 00000133 _TEXT	
Draw_End_Symbol  . . . . . . . .	P 	 00000044 _TEXT	Length= 00000013 Public
Draw_Line_Horizontal . . . . . .	P 	 00000067 _TEXT	Length= 00000024 Public
Draw_Line_Vertical . . . . . . .	P 	 0000008B _TEXT	Length= 0000003F Public
  _vertical  . . . . . . . . . .	L 	 000000B9 _TEXT	
Draw_Start_Symbol  . . . . . . .	P 	 00000031 _TEXT	Length= 00000013 Public
Get_Pos_Address  . . . . . . . .	P 	 00000005 _TEXT	Length= 0000002C Public
Get_Screen_Width_Size  . . . . .	P 	 00000057 _TEXT	Length= 00000010 Public
Make_Sum . . . . . . . . . . . .	P 	 00000000 _TEXT	Length= 00000005 Public
Show_Colors  . . . . . . . . . .	P 	 000000CA _TEXT	Length= 00000047 Public
  _external_rainbow  . . . . . .	L 	 000000F2 _TEXT	
  _internal_rainbow  . . . . . .	L 	 000000F4 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr


	   0 Warnings
	   0 Errors
